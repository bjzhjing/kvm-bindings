from glob import glob
import fileinput

BLACKLIST = [
    '__BindgenBitfieldUnit',
    '__IncompleteArrayField',
    '__kernel_fd_set',
    '__kernel_fsid_t',
    'kvm_enable_cap ',
    'kvm_hyperv_exit__bindgen_ty_1__bindgen_ty_2 ',
    'kvm_ioapic_state ',
    'kvm_ioeventfd ',
    'kvm_lapic_state ',
    'kvm_ppc_pvinfo ',
    'kvm_xsave ',
    'union '
]

FAM_STRUCT_LIST = [
    'kvm_coalesced_mmio_ring ',
    'kvm_cpuid ',
    'kvm_cpuid2 ',
    'kvm_irq_routing ',
    'kvm_msrs ',
    'kvm_msr_list ',
    'kvm_nested_state ',
    'kvm_reg_list ',
    'kvm_signal_mask ',
]

def println(line):
    print(line, end='')


def main():
    with fileinput.input(files=glob('src/x86/bindings_*.rs'),
                         inplace=True, backup='.bak',) as src:
        for line in src:
            println(line)
            # Add Serialize & Deserialize where necessary.
            if line.startswith('#[repr('):
                peek_line = src.readline()
                if peek_line.startswith('#[derive('):
                    # Skip if Serialize & Deserialize were manually added.
                    if 'Serialize' in peek_line:
                        println(peek_line)
                        continue
    
                    # Don't derive [De]Serialize on structs that don't support it.
                    next_line = src.readline()
                    ok_to_derive = True
                    for not_allowed in BLACKLIST:
                        if not_allowed in next_line:
                            ok_to_derive = False
                            break
    
                    is_fam_struct = False
                    for item in FAM_STRUCT_LIST:
                        if item in next_line:
                            is_fam_struct = True
    
                    if ok_to_derive:
                        if is_fam_struct:
                            println(peek_line.replace(')]', ', SerializeFfi, DeserializeFfiFam)]'))
                        else:
                            println(peek_line.replace(')]', ', SerializeFfi, DeserializeFfi)]'))
                    else:
                        println(peek_line)
                    println(next_line)
                elif peek_line.startswith("pub struct "):
                    next_line = peek_line
                    ok_to_derive = True
                    for not_allowed in BLACKLIST:
                        if not_allowed in next_line:
                            ok_to_derive = False
                            break
    
                    is_fam_struct = False
                    for item in FAM_STRUCT_LIST:
                        if item in next_line:
                            is_fam_struct = True
    
                    if ok_to_derive:
                        if is_fam_struct:
                            println('#[derive(SerializeFfi, DeserializeFfiFam)]\n')
                        else:
                            println('#[derive(SerializeFfi, DeserializeFfi)]\n')
                    println(next_line)
            elif line.startswith("/* automatically generated by rust-bindgen */"):
                println('\ninclude!("./serde.rs");\n')

if __name__ == '__main__':
    main()
